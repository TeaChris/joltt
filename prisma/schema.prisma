// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum  PayStatus {
  PENDING
  DELIVERED
}

model User {
  id                        String    @id @default(cuid()) @map("_id")
  name                      String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  role                      UserRole @default(USER)
  isTwoFactorEnabled        Boolean @default(false)
}

model Products {
  id                String @id @default(uuid()) @map("_id")
  userId            String
  name              String
  description       String
  price             Float
  size              Int
  stock             Int?
  imageUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  categoryId        String
  category          Category? @relation(fields: [categoryId], references: [id])

  isPublished       Boolean @default(false)
  isArchived        Boolean @default(false)


  orderItem   OrderItem[]
  review      Review[]

  @@index([categoryId])
  @@fulltext([name])
}

model Category {
  id         String @id @default(uuid()) @map("_id")
  name       String
  Products    Products[]
}

model VerificationToken {
  id      String @id @default(cuid()) @map("_id")
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model Orders {
  id          String @id @default(uuid()) @map("_id")
  userId      String
  isPaid      Boolean
  name        String
  price       Float
  delivery    PayStatus @default(PENDING)

  phone       String @default("")
  address     String @default("")


  orderItem   OrderItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@unique([userId])
}

model OrderItem {
  id          String @id @default(uuid()) @map("_id")

  orderId     String
  order       Orders @relation(fields: [orderId], references: [id])

  productId   String
  products    Products @relation(fields: [productId], references: [id])

  @@index([orderId])
}

model StripeCustomer {
  id                  String @id @default(uuid()) @map("_id")
  userId              String @unique
  stripeCustomerId    String @unique

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Review{
  id          String @id @default(uuid()) @map("_id")
  userId      String
  review      String

  productId   String
  products    Products @relation(fields: [productId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@unique([userId,productId])
}